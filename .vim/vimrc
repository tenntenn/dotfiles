"---------------------------------------------------------------------------
" vim settings
"---------------------------------------------------------------------------

"----------------------------------------
" mapping settings
"----------------------------------------

let mapleader = "\<Space>"

" タグジャンプ
nnoremap <silent> ,tn <C-]>
nnoremap <silent> ,tp <C-t>
" ノーマルモード時にOで改行
nnoremap O o<ESC>
" hlsearchのハイライトを消去
nnoremap <ESC><ESC> :nohlsearch<CR>

"----------------------------------------
" search settings
"----------------------------------------

"検索時に大文字小文字を無視 (noignorecase:無視しない)
set ignorecase
"両方が含まれている場合は大文字小文字を区別
set smartcase
" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
set wrapscan
" インクリメンタルサーチ
set incsearch 
" 検索パターンにマッチしたテキストのハイライト
set hlsearch

"----------------------------------------
" edit settings
"----------------------------------------

" タブの画面上での幅
set tabstop=4
" タブを挿入するときの幅
set shiftwidth=4
" <Tab>と<BS>を押した時の挙動をいい感じにする
set smarttab
" タブをスペースに展開する
set expandtab
" 自動的にインデントする
set cindent
" コメントのオートインデントといい感じに
if has("autocmd")
    autocmd FileType *
                \ let &l:comments
                \=join(filter(split(&l:comments, ','), 'v:val =~ "^[sme]"'), ',')
endif
" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
" 括弧入力時に対応する括弧を表示
set showmatch
" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu

" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM
" 日本語整形スクリプト(by. 西岡拓洋さん)用の設定
let format_allow_over_tw = 1	" ぶら下り可能幅
" ビープ音を鳴らさないように
set visualbell

" インクリメント時の挙動 デフォでは0や0xで始まる数字は8進，16進とみなされる
" 16進のみ許可し，他の数字は10進として扱う．
set nf = "hex"
" 画面端まで行かなくてもスクロールできる
set scrolloff=10

" インデントで折りたたみ
set foldmethod=indent
set foldlevel=99

"----------------------------------------
" display settings
"----------------------------------------

syntax on
" カラー設定
"colorscheme molokai
colorscheme default
" 行番号を非表示 (number:表示)
set number
" ルーラーを表示 (noruler:非表示)
set ruler
" タブや改行を表示 (list:表示)
set nolist
" どの文字でタブや改行を表示するかを設定
set listchars=tab:>-,extends:<,trail:-,eol:<
" 長い行を折り返して表示 (nowrap:折り返さない)
set wrap
" 常にステータス行を表示 (詳細は:he laststatus)
set laststatus=2
" コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set cmdheight=2
" コマンドをステータス行に表示
set showcmd
" タイトルを表示
set title
" カーソルのある行を強調表示
set cursorline

"----------------------------------------
" filetype settings
"----------------------------------------

autocmd BufNewFile,BufRead vimplugin set filetype=vim
autocmd BufNewFile,BufRead *md set filetype=markdown
"----------------------------------------
" ex settings
"----------------------------------------

"Windowsのランタイムパスを他のOSのパスに合わせる
:set runtimepath+=$HOME/.vim,$HOME/.vim/after

"ファイルを開いたらそのファイルのディレクトリに移動する
au   BufEnter *   execute ":lcd " . expand("%:p:h") 

"外部で変更があった場合自動的にファイルを読みなおす
set autoread
"頻繁に読み直すように
augroup vimrc-checktime
    autocmd!
    autocmd WinEnter * checktime
augroup END

"----------------------------------------
" backup settings
"----------------------------------------

" バックアップファイルを指定したフォルダに作成する
set backupdir=$HOME/.vim/.backup
" スワップファイルを指定したフォルダに作成する
let &directory=&backupdir

"バックアップフォルダがなければ作成する
if isdirectory(&directory) == 0
    echo "make backup directory"
    echo &directory
    call mkdir(&directory)
endif

if has('persistent_undo')
    set undodir=&directory
    set undofile
endif

"----------------------------------------
" encoding settings 
"----------------------------------------

if &encoding !=# 'utf-8'
    set encoding=japan
    set fileencoding=japan
end

if has('iconv')
    let s:enc_euc = 'euc-jp'
    let s:enc_jis = 'iso-2022-jp'

    " iconvがeucJP-msに対応しているかをチェック
    if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
        let s:enc_euc = 'eucjp-ms'
        let s:enc_jis = 'iso-2022-jp-3'
        " iconvがJISX0213に対応しているかをチェック
    elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
        let s:enc_euc = 'euc-jisx0213'
        let s:enc_jis = 'iso-2022-jp-3'
    endif

    " fileencodingsを構築
    if &encoding ==# 'utf-8'
        let s:fileencodings_default = &fileencodings
        "let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
        let &fileencodings = &fileencodings .','. s:fileencodings_default
        unlet s:fileencodings_default
    else

        let &fileencodings = &fileencodings .','. s:enc_jis
        set fileencodings+=utf-8,ucs-2le,ucs-2

        if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
            set fileencodings+=cp932
            set fileencodings-=euc-jp
            set fileencodings-=euc-jisx0213
            set fileencodings-=eucjp-ms
            let &encoding = s:enc_euc
            let &fileencoding = s:enc_euc
        else
            let &fileencodings = &fileencodings .','. s:enc_euc
        endif
    endif

    " 定数を処分
    unlet s:enc_euc
    unlet s:enc_jis
endif

"--------------------
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
    function! AU_ReCheck_FENC()
        if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
            let &fileencoding=&encoding
        endif
    endfunction

    autocmd BufReadPost * call AU_ReCheck_FENC()
endif

"--------------------
" 改行コードの自動認識
set fileformats=unix,dos,mac
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
    set ambiwidth=double
endif

"----------------
" タブページ
" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ


" --------------
" vimrc local
augroup vimrc-local
  autocmd!
  autocmd BufNewFile,BufReadPost * call s:vimrc_local(expand('<afile>:p:h'))
augroup END

function! s:vimrc_local(loc)
  let files = findfile('.vimrc.local', escape(a:loc, ' ') . ';', -1)
  for i in reverse(filter(files, 'filereadable(v:val)'))
    source `=i`
  endfor
endfunction

" --------------
" clipboard
set clipboard+=unnamed
